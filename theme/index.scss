@use "sass:list";
@import "./colors";
$theme-map: null;
$themes: (
    light: (
        bg_0: list.nth($primary_background, 1),
        inverted_bg: list.nth($primary_background, 2),
        active_font: list.nth($active_font_color, 1),
        inverted_font: list.nth($active_font_color, 2),
        inactive_font: list.nth($inactive_font_color, 1),
        accent: list.nth($accent_color, 1),
        error: list.nth($error, 1),
        success: list.nth($success, 1),
        bg_1: lighten(list.nth($primary_background, 1), 4),
        bg_2: lighten(list.nth($primary_background, 1), 8),
        bg_3: lighten(list.nth($primary_background, 1), 12),
        bg_4: lighten(list.nth($primary_background, 1), 16),
        bg_5: lighten(list.nth($primary_background, 1), 20),
        bg_6: lighten(list.nth($primary_background, 1), 24),
        shadow: list.nth($shadow, 1),
        border: list.nth($border, 1),
        theme_toggle_outer: #f1ce06,
        theme_toggle_inner: lighten(#f1ce06, 30),
    ),
    dark: (
        bg_0: list.nth($primary_background, 2),
        inverted_bg: list.nth($primary_background, 1),
        active_font: list.nth($active_font_color, 2),
        inverted_font: list.nth($active_font_color, 1),
        inactive_font: list.nth($inactive_font_color, 2),
        accent: list.nth($accent_color, 2),
        error: list.nth($error, 2),
        success: list.nth($success, 2),
        bg_1: lighten(list.nth($primary_background, 2), 4),
        bg_2: lighten(list.nth($primary_background, 2), 8),
        bg_3: lighten(list.nth($primary_background, 2), 12),
        bg_4: lighten(list.nth($primary_background, 2), 16),
        bg_5: lighten(list.nth($primary_background, 2), 20),
        bg_6: lighten(list.nth($primary_background, 2), 24),
        shadow: list.nth($shadow, 2),
        border: list.nth($border, 2),
        theme_toggle_outer: #fff,
        theme_toggle_inner: lighten(list.nth($primary_background, 2), 16),
    ),
);

@mixin themed() {
    @each $theme, $map in $themes {
        :global(.theme--#{$theme}) & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}' );
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
            @content;
            $theme-map: null !global;
        }
    }
}

@function getThemeColor($key) {
    @return map-get($theme-map, $key);
};

* {
    margin: 0;
    padding: 0;
    scroll-behavior: smooth;
    box-sizing: border-box;
    @include themed() {
        color: getThemeColor("inactive_font");
    }
}

:global(.theme--dark) {
    background-color: list.nth($primary_background, 2);
}
